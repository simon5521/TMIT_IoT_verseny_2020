/** Generated by YAKINDU Statechart Tools code generator. */

#include "Evaluation.h"

/*! \file Implementation of the state machine 'Evaluation'
*/




Evaluation::Evaluation()  :
stateConfVectorPosition(0),
ifaceAMonitor(),
ifaceBMonitor(),
ifaceEval(),
ifaceInternalSCI()
{
}

Evaluation::~Evaluation()
{
}


void Evaluation::init()
{
	for (sc_ushort i = 0; i < maxOrthogonalStates; ++i)
		stateConfVector[i] = Evaluation_last_state;
	
	stateConfVectorPosition = 0;

	clearInEvents();
	clearOutEvents();
	
	/* Default init sequence for statechart Evaluation */
	ifaceInternalSCI.sides = 0;
}

void Evaluation::enter()
{
	/* Default enter sequence for statechart Evaluation */
	enseq_evaluation_default();
}

void Evaluation::exit()
{
	/* Default exit sequence for statechart Evaluation */
	exseq_evaluation();
}

sc_boolean Evaluation::isActive() const
{
	return stateConfVector[0] != Evaluation_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean Evaluation::isFinal() const
{
   return false;}

void Evaluation::runCycle()
{
	
	clearOutEvents();
	for (stateConfVectorPosition = 0;
		stateConfVectorPosition < maxOrthogonalStates;
		stateConfVectorPosition++)
		{
			
		switch (stateConfVector[stateConfVectorPosition])
		{
		case evaluation_Operation_r1_Normal :
		{
			evaluation_Operation_r1_Normal_react(true);
			break;
		}
		case evaluation_Operation_r1_Warning :
		{
			evaluation_Operation_r1_Warning_react(true);
			break;
		}
		case evaluation_Selfsteering :
		{
			evaluation_Selfsteering_react(true);
			break;
		}
		case evaluation_LoA :
		{
			evaluation_LoA_react(true);
			break;
		}
		default:
			break;
		}
	}
	clearInEvents();
}

void Evaluation::clearInEvents()
{
	ifaceAMonitor.warning_raised = false;
	ifaceAMonitor.selfsteering_raised = false;
	ifaceAMonitor.loa_raised = false;
	ifaceBMonitor.warning_raised = false;
	ifaceBMonitor.selfsteering_raised = false;
	ifaceBMonitor.loa_raised = false;
}

void Evaluation::clearOutEvents()
{
	ifaceEval.SS_raised = false;
	ifaceEval.SLoA_raised = false;
}


sc_boolean Evaluation::isStateActive(EvaluationStates state) const
{
	switch (state)
	{
		case evaluation_Operation : 
			return (sc_boolean) (stateConfVector[SCVI_EVALUATION_OPERATION] >= evaluation_Operation
				&& stateConfVector[SCVI_EVALUATION_OPERATION] <= evaluation_Operation_r1_Warning);
		case evaluation_Operation_r1_Normal : 
			return (sc_boolean) (stateConfVector[SCVI_EVALUATION_OPERATION_R1_NORMAL] == evaluation_Operation_r1_Normal
			);
		case evaluation_Operation_r1_Warning : 
			return (sc_boolean) (stateConfVector[SCVI_EVALUATION_OPERATION_R1_WARNING] == evaluation_Operation_r1_Warning
			);
		case evaluation_Selfsteering : 
			return (sc_boolean) (stateConfVector[SCVI_EVALUATION_SELFSTEERING] == evaluation_Selfsteering
			);
		case evaluation_LoA : 
			return (sc_boolean) (stateConfVector[SCVI_EVALUATION_LOA] == evaluation_LoA
			);
		default: return false;
	}
}

Evaluation::SCI_AMonitor* Evaluation::getSCI_AMonitor()
{
	return &ifaceAMonitor;
}
/* Functions for event warning in interface SCI_AMonitor */
void Evaluation::SCI_AMonitor::raise_warning()
{
	warning_raised = true;
}
/* Functions for event selfsteering in interface SCI_AMonitor */
void Evaluation::SCI_AMonitor::raise_selfsteering()
{
	selfsteering_raised = true;
}
/* Functions for event loa in interface SCI_AMonitor */
void Evaluation::SCI_AMonitor::raise_loa()
{
	loa_raised = true;
}
Evaluation::SCI_BMonitor* Evaluation::getSCI_BMonitor()
{
	return &ifaceBMonitor;
}
/* Functions for event warning in interface SCI_BMonitor */
void Evaluation::SCI_BMonitor::raise_warning()
{
	warning_raised = true;
}
/* Functions for event selfsteering in interface SCI_BMonitor */
void Evaluation::SCI_BMonitor::raise_selfsteering()
{
	selfsteering_raised = true;
}
/* Functions for event loa in interface SCI_BMonitor */
void Evaluation::SCI_BMonitor::raise_loa()
{
	loa_raised = true;
}
Evaluation::SCI_Eval* Evaluation::getSCI_Eval()
{
	return &ifaceEval;
}
/* Functions for event SS in interface SCI_Eval */
sc_boolean Evaluation::SCI_Eval::isRaised_sS() const
{
	return SS_raised;
}
/* Functions for event SLoA in interface SCI_Eval */
sc_boolean Evaluation::SCI_Eval::isRaised_sLoA() const
{
	return SLoA_raised;
}
sc_integer Evaluation::InternalSCI::get_sides() const
{
	return sides;
}

void Evaluation::InternalSCI::set_sides(sc_integer value)
{
	this->sides = value;
}


// implementations of all internal functions

sc_boolean Evaluation::check_evaluation__choice_0_tr0_tr0()
{
	return (ifaceInternalSCI.sides) == (0);
}

void Evaluation::effect_evaluation__choice_0_tr0()
{
	enseq_evaluation_LoA_default();
}

void Evaluation::effect_evaluation__choice_0_tr1()
{
	enseq_evaluation_Operation_default();
}

/* Entry action for state 'Selfsteering'. */
void Evaluation::enact_evaluation_Selfsteering()
{
	/* Entry action for state 'Selfsteering'. */
	ifaceEval.SS_raised = true;
}

/* Entry action for state 'LoA'. */
void Evaluation::enact_evaluation_LoA()
{
	/* Entry action for state 'LoA'. */
	ifaceEval.SLoA_raised = true;
}

/* 'default' enter sequence for state Operation */
void Evaluation::enseq_evaluation_Operation_default()
{
	/* 'default' enter sequence for state Operation */
	enseq_evaluation_Operation_r1_default();
}

/* 'default' enter sequence for state Normal */
void Evaluation::enseq_evaluation_Operation_r1_Normal_default()
{
	/* 'default' enter sequence for state Normal */
	stateConfVector[0] = evaluation_Operation_r1_Normal;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Warning */
void Evaluation::enseq_evaluation_Operation_r1_Warning_default()
{
	/* 'default' enter sequence for state Warning */
	stateConfVector[0] = evaluation_Operation_r1_Warning;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Selfsteering */
void Evaluation::enseq_evaluation_Selfsteering_default()
{
	/* 'default' enter sequence for state Selfsteering */
	enact_evaluation_Selfsteering();
	stateConfVector[0] = evaluation_Selfsteering;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state LoA */
void Evaluation::enseq_evaluation_LoA_default()
{
	/* 'default' enter sequence for state LoA */
	enact_evaluation_LoA();
	stateConfVector[0] = evaluation_LoA;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for region evaluation */
void Evaluation::enseq_evaluation_default()
{
	/* 'default' enter sequence for region evaluation */
	react_evaluation__entry_Default();
}

/* 'default' enter sequence for region r1 */
void Evaluation::enseq_evaluation_Operation_r1_default()
{
	/* 'default' enter sequence for region r1 */
	react_evaluation_Operation_r1__entry_Default();
}

/* Default exit sequence for state Operation */
void Evaluation::exseq_evaluation_Operation()
{
	/* Default exit sequence for state Operation */
	exseq_evaluation_Operation_r1();
}

/* Default exit sequence for state Normal */
void Evaluation::exseq_evaluation_Operation_r1_Normal()
{
	/* Default exit sequence for state Normal */
	stateConfVector[0] = Evaluation_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Warning */
void Evaluation::exseq_evaluation_Operation_r1_Warning()
{
	/* Default exit sequence for state Warning */
	stateConfVector[0] = Evaluation_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Selfsteering */
void Evaluation::exseq_evaluation_Selfsteering()
{
	/* Default exit sequence for state Selfsteering */
	stateConfVector[0] = Evaluation_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state LoA */
void Evaluation::exseq_evaluation_LoA()
{
	/* Default exit sequence for state LoA */
	stateConfVector[0] = Evaluation_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for region evaluation */
void Evaluation::exseq_evaluation()
{
	/* Default exit sequence for region evaluation */
	/* Handle exit of all possible states (of Evaluation.evaluation) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case evaluation_Operation_r1_Normal :
		{
			exseq_evaluation_Operation_r1_Normal();
			break;
		}
		case evaluation_Operation_r1_Warning :
		{
			exseq_evaluation_Operation_r1_Warning();
			break;
		}
		case evaluation_Selfsteering :
		{
			exseq_evaluation_Selfsteering();
			break;
		}
		case evaluation_LoA :
		{
			exseq_evaluation_LoA();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region r1 */
void Evaluation::exseq_evaluation_Operation_r1()
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of Evaluation.evaluation.Operation.r1) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case evaluation_Operation_r1_Normal :
		{
			exseq_evaluation_Operation_r1_Normal();
			break;
		}
		case evaluation_Operation_r1_Warning :
		{
			exseq_evaluation_Operation_r1_Warning();
			break;
		}
		default: break;
	}
}

/* The reactions of state null. */
void Evaluation::react_evaluation__choice_0()
{
	/* The reactions of state null. */
	if (check_evaluation__choice_0_tr0_tr0())
	{ 
		effect_evaluation__choice_0_tr0();
	}  else
	{
		effect_evaluation__choice_0_tr1();
	}
}

/* Default react sequence for initial entry  */
void Evaluation::react_evaluation__entry_Default()
{
	/* Default react sequence for initial entry  */
	ifaceInternalSCI.sides = 2;
	enseq_evaluation_Operation_default();
}

/* Default react sequence for initial entry  */
void Evaluation::react_evaluation_Operation_r1__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_evaluation_Operation_r1_Normal_default();
}

sc_boolean Evaluation::react() {
	/* State machine reactions. */
	return false;
}

sc_boolean Evaluation::evaluation_Operation_react(const sc_boolean try_transition) {
	/* The reactions of state Operation. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			if ((ifaceAMonitor.selfsteering_raised) || (ifaceBMonitor.selfsteering_raised))
			{ 
				exseq_evaluation_Operation();
				ifaceEval.SS_raised = true;
				enseq_evaluation_Selfsteering_default();
			}  else
			{
				if ((ifaceAMonitor.loa_raised) || (ifaceBMonitor.loa_raised))
				{ 
					exseq_evaluation_Operation();
					ifaceInternalSCI.sides -= 1;
					react_evaluation__choice_0();
				}  else
				{
					did_transition = false;
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean Evaluation::evaluation_Operation_r1_Normal_react(const sc_boolean try_transition) {
	/* The reactions of state Normal. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((evaluation_Operation_react(try_transition)) == (false))
		{ 
			if ((ifaceAMonitor.warning_raised) || (ifaceBMonitor.warning_raised))
			{ 
				exseq_evaluation_Operation_r1_Normal();
				enseq_evaluation_Operation_r1_Warning_default();
			}  else
			{
				did_transition = false;
			}
		} 
	} 
	return did_transition;
}

sc_boolean Evaluation::evaluation_Operation_r1_Warning_react(const sc_boolean try_transition) {
	/* The reactions of state Warning. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((evaluation_Operation_react(try_transition)) == (false))
		{ 
			did_transition = false;
		} 
	} 
	return did_transition;
}

sc_boolean Evaluation::evaluation_Selfsteering_react(const sc_boolean try_transition) {
	/* The reactions of state Selfsteering. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			did_transition = false;
		} 
	} 
	return did_transition;
}

sc_boolean Evaluation::evaluation_LoA_react(const sc_boolean try_transition) {
	/* The reactions of state LoA. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			did_transition = false;
		} 
	} 
	return did_transition;
}



