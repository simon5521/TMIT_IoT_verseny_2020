/** Generated by YAKINDU Statechart Tools code generator. */

#include "Mainctrl.h"

/*! \file Implementation of the state machine 'Mainctrl'
*/




Mainctrl::Mainctrl()  :
stateConfVectorPosition(0),
ifaceMonitor(),
ifaceS1HW(),
ifaceS2HW(),
ifaceS3HW(),
ifaceUCHW(),
ifaceInternalSCI()
{
}

Mainctrl::~Mainctrl()
{
}


void Mainctrl::init()
{
	for (sc_ushort i = 0; i < maxOrthogonalStates; ++i)
		stateConfVector[i] = Mainctrl_last_state;
	
	stateConfVectorPosition = 0;

	clearInEvents();
	clearOutEvents();
	
	/* Default init sequence for statechart Mainctrl */
	ifaceInternalSCI.onsensors = 0;
	ifaceInternalSCI.oksensors = 0;
	ifaceInternalSCI.offsensors = 0;
	ifaceInternalSCI.latentsensors = 0;
}

void Mainctrl::enter()
{
	/* Default enter sequence for statechart Mainctrl */
	enseq_main_region_default();
}

void Mainctrl::exit()
{
	/* Default exit sequence for statechart Mainctrl */
	exseq_main_region();
}

sc_boolean Mainctrl::isActive() const
{
	return stateConfVector[0] != Mainctrl_last_state||stateConfVector[1] != Mainctrl_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean Mainctrl::isFinal() const
{
   return false;}

void Mainctrl::runCycle()
{
	
	clearOutEvents();
	for (stateConfVectorPosition = 0;
		stateConfVectorPosition < maxOrthogonalStates;
		stateConfVectorPosition++)
		{
			
		switch (stateConfVector[stateConfVectorPosition])
		{
		case main_region_main_operation_Off :
		{
			main_region_main_operation_Off_react(true);
			break;
		}
		case main_region_main_operation_On_r1_NormalOperation :
		{
			main_region_main_operation_On_r1_NormalOperation_react(true);
			break;
		}
		case main_region_main_operation_On_r1_Warning :
		{
			main_region_main_operation_On_r1_Warning_react(true);
			break;
		}
		case main_region_main_evaluation_working :
		{
			main_region_main_evaluation_working_react(true);
			break;
		}
		case main_region_main_evaluation_ShutdownState :
		{
			main_region_main_evaluation_ShutdownState_react(true);
			break;
		}
		case main_region_main_evaluation_SelfSteeringState :
		{
			main_region_main_evaluation_SelfSteeringState_react(true);
			break;
		}
		default:
			break;
		}
	}
	clearInEvents();
}

void Mainctrl::clearInEvents()
{
	ifaceS1HW.det_raised = false;
	ifaceS1HW.latent_raised = false;
	ifaceS2HW.det_raised = false;
	ifaceS2HW.latent_raised = false;
	ifaceS3HW.det_raised = false;
	ifaceS3HW.latent_raised = false;
	ifaceUCHW.shutdown_raised = false;
}

void Mainctrl::clearOutEvents()
{
	ifaceMonitor.warning_raised = false;
	ifaceMonitor.selfsteering_raised = false;
	ifaceMonitor.loa_raised = false;
}


sc_boolean Mainctrl::isStateActive(MainctrlStates state) const
{
	switch (state)
	{
		case main_region_main : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MAIN] >= main_region_main
				&& stateConfVector[SCVI_MAIN_REGION_MAIN] <= main_region_main_evaluation_SelfSteeringState);
		case main_region_main_operation_Off : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MAIN_OPERATION_OFF] == main_region_main_operation_Off
			);
		case main_region_main_operation_On : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MAIN_OPERATION_ON] >= main_region_main_operation_On
				&& stateConfVector[SCVI_MAIN_REGION_MAIN_OPERATION_ON] <= main_region_main_operation_On_r1_Warning);
		case main_region_main_operation_On_r1_NormalOperation : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MAIN_OPERATION_ON_R1_NORMALOPERATION] == main_region_main_operation_On_r1_NormalOperation
			);
		case main_region_main_operation_On_r1_Warning : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MAIN_OPERATION_ON_R1_WARNING] == main_region_main_operation_On_r1_Warning
			);
		case main_region_main_evaluation_working : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MAIN_EVALUATION_WORKING] == main_region_main_evaluation_working
			);
		case main_region_main_evaluation_ShutdownState : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MAIN_EVALUATION_SHUTDOWNSTATE] == main_region_main_evaluation_ShutdownState
			);
		case main_region_main_evaluation_SelfSteeringState : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_MAIN_EVALUATION_SELFSTEERINGSTATE] == main_region_main_evaluation_SelfSteeringState
			);
		default: return false;
	}
}

Mainctrl::SCI_Monitor* Mainctrl::getSCI_Monitor()
{
	return &ifaceMonitor;
}
/* Functions for event warning in interface SCI_Monitor */
sc_boolean Mainctrl::SCI_Monitor::isRaised_warning() const
{
	return warning_raised;
}
/* Functions for event selfsteering in interface SCI_Monitor */
sc_boolean Mainctrl::SCI_Monitor::isRaised_selfsteering() const
{
	return selfsteering_raised;
}
/* Functions for event loa in interface SCI_Monitor */
sc_boolean Mainctrl::SCI_Monitor::isRaised_loa() const
{
	return loa_raised;
}
Mainctrl::SCI_S1HW* Mainctrl::getSCI_S1HW()
{
	return &ifaceS1HW;
}
/* Functions for event det in interface SCI_S1HW */
void Mainctrl::SCI_S1HW::raise_det()
{
	det_raised = true;
}
/* Functions for event latent in interface SCI_S1HW */
void Mainctrl::SCI_S1HW::raise_latent()
{
	latent_raised = true;
}
Mainctrl::SCI_S2HW* Mainctrl::getSCI_S2HW()
{
	return &ifaceS2HW;
}
/* Functions for event det in interface SCI_S2HW */
void Mainctrl::SCI_S2HW::raise_det()
{
	det_raised = true;
}
/* Functions for event latent in interface SCI_S2HW */
void Mainctrl::SCI_S2HW::raise_latent()
{
	latent_raised = true;
}
Mainctrl::SCI_S3HW* Mainctrl::getSCI_S3HW()
{
	return &ifaceS3HW;
}
/* Functions for event det in interface SCI_S3HW */
void Mainctrl::SCI_S3HW::raise_det()
{
	det_raised = true;
}
/* Functions for event latent in interface SCI_S3HW */
void Mainctrl::SCI_S3HW::raise_latent()
{
	latent_raised = true;
}
Mainctrl::SCI_UCHW* Mainctrl::getSCI_UCHW()
{
	return &ifaceUCHW;
}
/* Functions for event shutdown in interface SCI_UCHW */
void Mainctrl::SCI_UCHW::raise_shutdown()
{
	shutdown_raised = true;
}
sc_integer Mainctrl::InternalSCI::get_onsensors() const
{
	return onsensors;
}

void Mainctrl::InternalSCI::set_onsensors(sc_integer value)
{
	this->onsensors = value;
}

sc_integer Mainctrl::InternalSCI::get_oksensors() const
{
	return oksensors;
}

void Mainctrl::InternalSCI::set_oksensors(sc_integer value)
{
	this->oksensors = value;
}

sc_integer Mainctrl::InternalSCI::get_offsensors() const
{
	return offsensors;
}

void Mainctrl::InternalSCI::set_offsensors(sc_integer value)
{
	this->offsensors = value;
}

sc_integer Mainctrl::InternalSCI::get_latentsensors() const
{
	return latentsensors;
}

void Mainctrl::InternalSCI::set_latentsensors(sc_integer value)
{
	this->latentsensors = value;
}


// implementations of all internal functions

sc_boolean Mainctrl::check_main_region_main_operation__choice_0_tr0_tr0()
{
	return (0) == (ifaceInternalSCI.onsensors);
}

sc_boolean Mainctrl::check_main_region_main_evaluation__choice_0_tr0_tr0()
{
	return (ifaceInternalSCI.latentsensors) >= (ifaceInternalSCI.oksensors);
}

void Mainctrl::effect_main_region_main_operation__choice_0_tr0()
{
	enseq_main_region_main_operation_Off_default();
}

void Mainctrl::effect_main_region_main_operation__choice_0_tr1()
{
	enseq_main_region_main_operation_On_r1_Warning_default();
}

void Mainctrl::effect_main_region_main_evaluation__choice_0_tr0()
{
	ifaceMonitor.selfsteering_raised = true;
	enseq_main_region_main_evaluation_SelfSteeringState_default();
}

void Mainctrl::effect_main_region_main_evaluation__choice_0_tr1()
{
	enseq_main_region_main_evaluation_working_default();
}

/* Entry action for state 'Off'. */
void Mainctrl::enact_main_region_main_operation_Off()
{
	/* Entry action for state 'Off'. */
	ifaceMonitor.loa_raised = true;
}

/* Entry action for state 'Warning'. */
void Mainctrl::enact_main_region_main_operation_On_r1_Warning()
{
	/* Entry action for state 'Warning'. */
	ifaceMonitor.warning_raised = true;
}

/* Entry action for state 'ShutdownState'. */
void Mainctrl::enact_main_region_main_evaluation_ShutdownState()
{
	/* Entry action for state 'ShutdownState'. */
	ifaceMonitor.loa_raised = true;
}

/* Entry action for state 'SelfSteeringState'. */
void Mainctrl::enact_main_region_main_evaluation_SelfSteeringState()
{
	/* Entry action for state 'SelfSteeringState'. */
	ifaceMonitor.selfsteering_raised = true;
}

/* 'default' enter sequence for state main */
void Mainctrl::enseq_main_region_main_default()
{
	/* 'default' enter sequence for state main */
	enseq_main_region_main_operation_default();
	enseq_main_region_main_evaluation_default();
}

/* 'default' enter sequence for state Off */
void Mainctrl::enseq_main_region_main_operation_Off_default()
{
	/* 'default' enter sequence for state Off */
	enact_main_region_main_operation_Off();
	stateConfVector[0] = main_region_main_operation_Off;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state On */
void Mainctrl::enseq_main_region_main_operation_On_default()
{
	/* 'default' enter sequence for state On */
	enseq_main_region_main_operation_On_r1_default();
}

/* 'default' enter sequence for state NormalOperation */
void Mainctrl::enseq_main_region_main_operation_On_r1_NormalOperation_default()
{
	/* 'default' enter sequence for state NormalOperation */
	stateConfVector[0] = main_region_main_operation_On_r1_NormalOperation;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Warning */
void Mainctrl::enseq_main_region_main_operation_On_r1_Warning_default()
{
	/* 'default' enter sequence for state Warning */
	enact_main_region_main_operation_On_r1_Warning();
	stateConfVector[0] = main_region_main_operation_On_r1_Warning;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state working */
void Mainctrl::enseq_main_region_main_evaluation_working_default()
{
	/* 'default' enter sequence for state working */
	stateConfVector[1] = main_region_main_evaluation_working;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state ShutdownState */
void Mainctrl::enseq_main_region_main_evaluation_ShutdownState_default()
{
	/* 'default' enter sequence for state ShutdownState */
	enact_main_region_main_evaluation_ShutdownState();
	stateConfVector[1] = main_region_main_evaluation_ShutdownState;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state SelfSteeringState */
void Mainctrl::enseq_main_region_main_evaluation_SelfSteeringState_default()
{
	/* 'default' enter sequence for state SelfSteeringState */
	enact_main_region_main_evaluation_SelfSteeringState();
	stateConfVector[1] = main_region_main_evaluation_SelfSteeringState;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for region main region */
void Mainctrl::enseq_main_region_default()
{
	/* 'default' enter sequence for region main region */
	react_main_region__entry_Default();
}

/* 'default' enter sequence for region operation */
void Mainctrl::enseq_main_region_main_operation_default()
{
	/* 'default' enter sequence for region operation */
	react_main_region_main_operation__entry_Default();
}

/* 'default' enter sequence for region r1 */
void Mainctrl::enseq_main_region_main_operation_On_r1_default()
{
	/* 'default' enter sequence for region r1 */
	react_main_region_main_operation_On_r1__entry_Default();
}

/* 'default' enter sequence for region evaluation */
void Mainctrl::enseq_main_region_main_evaluation_default()
{
	/* 'default' enter sequence for region evaluation */
	react_main_region_main_evaluation__entry_Default();
}

/* Default exit sequence for state Off */
void Mainctrl::exseq_main_region_main_operation_Off()
{
	/* Default exit sequence for state Off */
	stateConfVector[0] = Mainctrl_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state On */
void Mainctrl::exseq_main_region_main_operation_On()
{
	/* Default exit sequence for state On */
	exseq_main_region_main_operation_On_r1();
}

/* Default exit sequence for state NormalOperation */
void Mainctrl::exseq_main_region_main_operation_On_r1_NormalOperation()
{
	/* Default exit sequence for state NormalOperation */
	stateConfVector[0] = Mainctrl_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Warning */
void Mainctrl::exseq_main_region_main_operation_On_r1_Warning()
{
	/* Default exit sequence for state Warning */
	stateConfVector[0] = Mainctrl_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state working */
void Mainctrl::exseq_main_region_main_evaluation_working()
{
	/* Default exit sequence for state working */
	stateConfVector[1] = Mainctrl_last_state;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state ShutdownState */
void Mainctrl::exseq_main_region_main_evaluation_ShutdownState()
{
	/* Default exit sequence for state ShutdownState */
	stateConfVector[1] = Mainctrl_last_state;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state SelfSteeringState */
void Mainctrl::exseq_main_region_main_evaluation_SelfSteeringState()
{
	/* Default exit sequence for state SelfSteeringState */
	stateConfVector[1] = Mainctrl_last_state;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for region main region */
void Mainctrl::exseq_main_region()
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of Mainctrl.main_region) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_main_operation_Off :
		{
			exseq_main_region_main_operation_Off();
			break;
		}
		case main_region_main_operation_On_r1_NormalOperation :
		{
			exseq_main_region_main_operation_On_r1_NormalOperation();
			break;
		}
		case main_region_main_operation_On_r1_Warning :
		{
			exseq_main_region_main_operation_On_r1_Warning();
			break;
		}
		default: break;
	}
	/* Handle exit of all possible states (of Mainctrl.main_region) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case main_region_main_evaluation_working :
		{
			exseq_main_region_main_evaluation_working();
			break;
		}
		case main_region_main_evaluation_ShutdownState :
		{
			exseq_main_region_main_evaluation_ShutdownState();
			break;
		}
		case main_region_main_evaluation_SelfSteeringState :
		{
			exseq_main_region_main_evaluation_SelfSteeringState();
			break;
		}
		default: break;
	}
}

/* Default exit sequence for region r1 */
void Mainctrl::exseq_main_region_main_operation_On_r1()
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of Mainctrl.main_region.main.operation.On.r1) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_main_operation_On_r1_NormalOperation :
		{
			exseq_main_region_main_operation_On_r1_NormalOperation();
			break;
		}
		case main_region_main_operation_On_r1_Warning :
		{
			exseq_main_region_main_operation_On_r1_Warning();
			break;
		}
		default: break;
	}
}

/* The reactions of state null. */
void Mainctrl::react_main_region_main_operation__choice_0()
{
	/* The reactions of state null. */
	if (check_main_region_main_operation__choice_0_tr0_tr0())
	{ 
		effect_main_region_main_operation__choice_0_tr0();
	}  else
	{
		effect_main_region_main_operation__choice_0_tr1();
	}
}

/* The reactions of state null. */
void Mainctrl::react_main_region_main_evaluation__choice_0()
{
	/* The reactions of state null. */
	if (check_main_region_main_evaluation__choice_0_tr0_tr0())
	{ 
		effect_main_region_main_evaluation__choice_0_tr0();
	}  else
	{
		effect_main_region_main_evaluation__choice_0_tr1();
	}
}

/* Default react sequence for initial entry  */
void Mainctrl::react_main_region_main_operation_On_r1__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_main_operation_On_r1_NormalOperation_default();
}

/* Default react sequence for initial entry  */
void Mainctrl::react_main_region_main_operation__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_main_operation_On_default();
}

/* Default react sequence for initial entry  */
void Mainctrl::react_main_region_main_evaluation__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_main_evaluation_working_default();
}

/* Default react sequence for initial entry  */
void Mainctrl::react_main_region__entry_Default()
{
	/* Default react sequence for initial entry  */
	ifaceInternalSCI.onsensors = 3;
	ifaceInternalSCI.oksensors = 3;
	ifaceInternalSCI.offsensors = 0;
	enseq_main_region_main_default();
}

sc_boolean Mainctrl::react() {
	/* State machine reactions. */
	return false;
}

sc_boolean Mainctrl::main_region_main_react(const sc_boolean try_transition) {
	/* The reactions of state main. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			did_transition = false;
		} 
	} 
	return did_transition;
}

sc_boolean Mainctrl::main_region_main_operation_Off_react(const sc_boolean try_transition) {
	/* The reactions of state Off. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((main_region_main_react(try_transition)) == (false))
		{ 
			did_transition = false;
		} 
	} 
	return did_transition;
}

sc_boolean Mainctrl::main_region_main_operation_On_react(const sc_boolean try_transition) {
	/* The reactions of state On. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((main_region_main_react(try_transition)) == (false))
		{ 
			if ((ifaceS1HW.det_raised) || ((ifaceS2HW.det_raised) || (ifaceS3HW.det_raised)))
			{ 
				exseq_main_region_main_operation_On();
				ifaceInternalSCI.onsensors -= 1;
				ifaceInternalSCI.oksensors -= 1;
				react_main_region_main_operation__choice_0();
			}  else
			{
				did_transition = false;
			}
		} 
	} 
	return did_transition;
}

sc_boolean Mainctrl::main_region_main_operation_On_r1_NormalOperation_react(const sc_boolean try_transition) {
	/* The reactions of state NormalOperation. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((main_region_main_operation_On_react(try_transition)) == (false))
		{ 
			if (ifaceS1HW.det_raised)
			{ 
				exseq_main_region_main_operation_On_r1_NormalOperation();
				enseq_main_region_main_operation_On_r1_Warning_default();
			}  else
			{
				if (ifaceS2HW.det_raised)
				{ 
					exseq_main_region_main_operation_On_r1_NormalOperation();
					enseq_main_region_main_operation_On_r1_Warning_default();
				}  else
				{
					if (ifaceS3HW.det_raised)
					{ 
						exseq_main_region_main_operation_On_r1_NormalOperation();
						enseq_main_region_main_operation_On_r1_Warning_default();
					}  else
					{
						did_transition = false;
					}
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean Mainctrl::main_region_main_operation_On_r1_Warning_react(const sc_boolean try_transition) {
	/* The reactions of state Warning. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((main_region_main_operation_On_react(try_transition)) == (false))
		{ 
			did_transition = false;
		} 
	} 
	return did_transition;
}

sc_boolean Mainctrl::main_region_main_evaluation_working_react(const sc_boolean try_transition) {
	/* The reactions of state working. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((ifaceS1HW.latent_raised) || ((ifaceS2HW.latent_raised) || (ifaceS3HW.latent_raised)))
		{ 
			exseq_main_region_main_evaluation_working();
			ifaceInternalSCI.latentsensors += 1;
			ifaceInternalSCI.oksensors -= 1;
			react_main_region_main_evaluation__choice_0();
		}  else
		{
			if (ifaceUCHW.shutdown_raised)
			{ 
				exseq_main_region_main_evaluation_working();
				enseq_main_region_main_evaluation_ShutdownState_default();
			}  else
			{
				did_transition = false;
			}
		}
	} 
	return did_transition;
}

sc_boolean Mainctrl::main_region_main_evaluation_ShutdownState_react(const sc_boolean try_transition) {
	/* The reactions of state ShutdownState. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		did_transition = false;
	} 
	return did_transition;
}

sc_boolean Mainctrl::main_region_main_evaluation_SelfSteeringState_react(const sc_boolean try_transition) {
	/* The reactions of state SelfSteeringState. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		did_transition = false;
	} 
	return did_transition;
}



