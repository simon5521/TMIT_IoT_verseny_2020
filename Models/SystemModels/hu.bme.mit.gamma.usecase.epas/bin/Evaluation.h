/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef EVALUATION_H_
#define EVALUATION_H_


#include "sc_types.h"
#include "StatemachineInterface.h"

/*! \file Header of the state machine 'Evaluation'.
*/


/*! Define indices of states in the StateConfVector */
#define SCVI_EVALUATION_OPERATION 0
#define SCVI_EVALUATION_OPERATION_R1_NORMAL 0
#define SCVI_EVALUATION_OPERATION_R1_WARNING 0
#define SCVI_EVALUATION_SELFSTEERING 0
#define SCVI_EVALUATION_LOA 0


class Evaluation : public StatemachineInterface
{
	public:
		Evaluation();
		
		virtual ~Evaluation();
		
		/*! Enumeration of all states */ 
		typedef enum
		{
			Evaluation_last_state,
			evaluation_Operation,
			evaluation_Operation_r1_Normal,
			evaluation_Operation_r1_Warning,
			evaluation_Selfsteering,
			evaluation_LoA
		} EvaluationStates;
					
		static const sc_integer numStates = 5;
		
		//! Inner class for AMonitor interface scope.
		class SCI_AMonitor
		{
			public:
				/*! Raises the in event 'warning' that is defined in the interface scope 'AMonitor'. */
				void raise_warning();
				
				
				/*! Raises the in event 'selfsteering' that is defined in the interface scope 'AMonitor'. */
				void raise_selfsteering();
				
				
				/*! Raises the in event 'loa' that is defined in the interface scope 'AMonitor'. */
				void raise_loa();
				
				
				
			private:
				friend class Evaluation;
				sc_boolean warning_raised;
				sc_boolean selfsteering_raised;
				sc_boolean loa_raised;
				
				
		};
		
		/*! Returns an instance of the interface class 'SCI_AMonitor'. */
		SCI_AMonitor* getSCI_AMonitor();
		
		//! Inner class for BMonitor interface scope.
		class SCI_BMonitor
		{
			public:
				/*! Raises the in event 'warning' that is defined in the interface scope 'BMonitor'. */
				void raise_warning();
				
				
				/*! Raises the in event 'selfsteering' that is defined in the interface scope 'BMonitor'. */
				void raise_selfsteering();
				
				
				/*! Raises the in event 'loa' that is defined in the interface scope 'BMonitor'. */
				void raise_loa();
				
				
				
			private:
				friend class Evaluation;
				sc_boolean warning_raised;
				sc_boolean selfsteering_raised;
				sc_boolean loa_raised;
				
				
		};
		
		/*! Returns an instance of the interface class 'SCI_BMonitor'. */
		SCI_BMonitor* getSCI_BMonitor();
		
		//! Inner class for Eval interface scope.
		class SCI_Eval
		{
			public:
				/*! Checks if the out event 'SS' that is defined in the interface scope 'Eval' has been raised. */
				sc_boolean isRaised_sS() const;
				
				
				/*! Checks if the out event 'SLoA' that is defined in the interface scope 'Eval' has been raised. */
				sc_boolean isRaised_sLoA() const;
				
				
				
			private:
				friend class Evaluation;
				sc_boolean SS_raised;
				sc_boolean SLoA_raised;
				
				
		};
		
		/*! Returns an instance of the interface class 'SCI_Eval'. */
		SCI_Eval* getSCI_Eval();
		
		
		/*
		 * Functions inherited from StatemachineInterface
		 */
		virtual void init();
		
		virtual void enter();
		
		virtual void exit();
		
		virtual void runCycle();
		
		/*!
		* Checks if the state machine is active (until 2.4.1 this method was used for states).
		* A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		*/
		virtual sc_boolean isActive() const;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		virtual sc_boolean isFinal() const;
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		sc_boolean isStateActive(EvaluationStates state) const;
		
		
		
	protected:
		
		
	private:
		
		//! Inner class for internal interface scope.
		class InternalSCI
		{
			public:
				/*! Gets the value of the variable 'sides' that is defined in the internal scope. */
				sc_integer get_sides() const;
				
				/*! Sets the value of the variable 'sides' that is defined in the internal scope. */
				void set_sides(sc_integer value);
				
				
				
			private:
				friend class Evaluation;
				sc_integer sides;
				
				
		};
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc_ushort maxOrthogonalStates = 1;
		
		
		
		EvaluationStates stateConfVector[maxOrthogonalStates];
		
		sc_ushort stateConfVectorPosition;
		
		SCI_AMonitor ifaceAMonitor;
		SCI_BMonitor ifaceBMonitor;
		SCI_Eval ifaceEval;
		InternalSCI ifaceInternalSCI;
		
		// prototypes of all internal functions
		
		sc_boolean check_evaluation__choice_0_tr0_tr0();
		void effect_evaluation__choice_0_tr0();
		void effect_evaluation__choice_0_tr1();
		void enact_evaluation_Selfsteering();
		void enact_evaluation_LoA();
		void enseq_evaluation_Operation_default();
		void enseq_evaluation_Operation_r1_Normal_default();
		void enseq_evaluation_Operation_r1_Warning_default();
		void enseq_evaluation_Selfsteering_default();
		void enseq_evaluation_LoA_default();
		void enseq_evaluation_default();
		void enseq_evaluation_Operation_r1_default();
		void exseq_evaluation_Operation();
		void exseq_evaluation_Operation_r1_Normal();
		void exseq_evaluation_Operation_r1_Warning();
		void exseq_evaluation_Selfsteering();
		void exseq_evaluation_LoA();
		void exseq_evaluation();
		void exseq_evaluation_Operation_r1();
		void react_evaluation__choice_0();
		void react_evaluation__entry_Default();
		void react_evaluation_Operation_r1__entry_Default();
		sc_boolean react();
		sc_boolean evaluation_Operation_react(const sc_boolean try_transition);
		sc_boolean evaluation_Operation_r1_Normal_react(const sc_boolean try_transition);
		sc_boolean evaluation_Operation_r1_Warning_react(const sc_boolean try_transition);
		sc_boolean evaluation_Selfsteering_react(const sc_boolean try_transition);
		sc_boolean evaluation_LoA_react(const sc_boolean try_transition);
		void clearInEvents();
		void clearOutEvents();
		
		
		
		
};




#endif /* EVALUATION_H_ */
