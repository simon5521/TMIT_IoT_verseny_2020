/** Generated by YAKINDU Statechart Tools code generator. */

#include "Sensor.h"

/*! \file Implementation of the state machine 'Sensor'
*/




Sensor::Sensor()  :
stateConfVectorPosition(0),
ifaceHWFault(),
ifaceSensorFault()
{
}

Sensor::~Sensor()
{
}


void Sensor::init()
{
	for (sc_ushort i = 0; i < maxOrthogonalStates; ++i)
		stateConfVector[i] = Sensor_last_state;
	
	stateConfVectorPosition = 0;

	clearInEvents();
	clearOutEvents();
	
}

void Sensor::enter()
{
	/* Default enter sequence for statechart Sensor */
	enseq_Sensor_default();
}

void Sensor::exit()
{
	/* Default exit sequence for statechart Sensor */
	exseq_Sensor();
}

sc_boolean Sensor::isActive() const
{
	return stateConfVector[0] != Sensor_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean Sensor::isFinal() const
{
   return false;}

void Sensor::runCycle()
{
	
	clearOutEvents();
	for (stateConfVectorPosition = 0;
		stateConfVectorPosition < maxOrthogonalStates;
		stateConfVectorPosition++)
		{
			
		switch (stateConfVector[stateConfVectorPosition])
		{
		case Sensor_Ok :
		{
			Sensor_Ok_react(true);
			break;
		}
		case Sensor_Off :
		{
			Sensor_Off_react(true);
			break;
		}
		case Sensor_LatentFailure :
		{
			Sensor_LatentFailure_react(true);
			break;
		}
		default:
			break;
		}
	}
	clearInEvents();
}

void Sensor::clearInEvents()
{
	ifaceHWFault.det_raised = false;
	ifaceHWFault.latent_raised = false;
}

void Sensor::clearOutEvents()
{
	ifaceSensorFault.det_raised = false;
	ifaceSensorFault.latent_raised = false;
}


sc_boolean Sensor::isStateActive(SensorStates state) const
{
	switch (state)
	{
		case Sensor_Ok : 
			return (sc_boolean) (stateConfVector[SCVI_SENSOR_OK] == Sensor_Ok
			);
		case Sensor_Off : 
			return (sc_boolean) (stateConfVector[SCVI_SENSOR_OFF] == Sensor_Off
			);
		case Sensor_LatentFailure : 
			return (sc_boolean) (stateConfVector[SCVI_SENSOR_LATENTFAILURE] == Sensor_LatentFailure
			);
		default: return false;
	}
}

Sensor::SCI_HWFault* Sensor::getSCI_HWFault()
{
	return &ifaceHWFault;
}
/* Functions for event det in interface SCI_HWFault */
void Sensor::SCI_HWFault::raise_det()
{
	det_raised = true;
}
/* Functions for event latent in interface SCI_HWFault */
void Sensor::SCI_HWFault::raise_latent()
{
	latent_raised = true;
}
Sensor::SCI_SensorFault* Sensor::getSCI_SensorFault()
{
	return &ifaceSensorFault;
}
/* Functions for event det in interface SCI_SensorFault */
sc_boolean Sensor::SCI_SensorFault::isRaised_det() const
{
	return det_raised;
}
/* Functions for event latent in interface SCI_SensorFault */
sc_boolean Sensor::SCI_SensorFault::isRaised_latent() const
{
	return latent_raised;
}

// implementations of all internal functions

/* Entry action for state 'Off'. */
void Sensor::enact_Sensor_Off()
{
	/* Entry action for state 'Off'. */
	ifaceSensorFault.det_raised = true;
}

/* Entry action for state 'LatentFailure'. */
void Sensor::enact_Sensor_LatentFailure()
{
	/* Entry action for state 'LatentFailure'. */
	ifaceSensorFault.latent_raised = true;
}

/* 'default' enter sequence for state Ok */
void Sensor::enseq_Sensor_Ok_default()
{
	/* 'default' enter sequence for state Ok */
	stateConfVector[0] = Sensor_Ok;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Off */
void Sensor::enseq_Sensor_Off_default()
{
	/* 'default' enter sequence for state Off */
	enact_Sensor_Off();
	stateConfVector[0] = Sensor_Off;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state LatentFailure */
void Sensor::enseq_Sensor_LatentFailure_default()
{
	/* 'default' enter sequence for state LatentFailure */
	enact_Sensor_LatentFailure();
	stateConfVector[0] = Sensor_LatentFailure;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for region Sensor */
void Sensor::enseq_Sensor_default()
{
	/* 'default' enter sequence for region Sensor */
	react_Sensor__entry_Default();
}

/* Default exit sequence for state Ok */
void Sensor::exseq_Sensor_Ok()
{
	/* Default exit sequence for state Ok */
	stateConfVector[0] = Sensor_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Off */
void Sensor::exseq_Sensor_Off()
{
	/* Default exit sequence for state Off */
	stateConfVector[0] = Sensor_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state LatentFailure */
void Sensor::exseq_Sensor_LatentFailure()
{
	/* Default exit sequence for state LatentFailure */
	stateConfVector[0] = Sensor_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for region Sensor */
void Sensor::exseq_Sensor()
{
	/* Default exit sequence for region Sensor */
	/* Handle exit of all possible states (of Sensor.Sensor) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case Sensor_Ok :
		{
			exseq_Sensor_Ok();
			break;
		}
		case Sensor_Off :
		{
			exseq_Sensor_Off();
			break;
		}
		case Sensor_LatentFailure :
		{
			exseq_Sensor_LatentFailure();
			break;
		}
		default: break;
	}
}

/* Default react sequence for initial entry  */
void Sensor::react_Sensor__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_Sensor_Ok_default();
}

sc_boolean Sensor::react() {
	/* State machine reactions. */
	return false;
}

sc_boolean Sensor::Sensor_Ok_react(const sc_boolean try_transition) {
	/* The reactions of state Ok. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			if (ifaceHWFault.det_raised)
			{ 
				exseq_Sensor_Ok();
				enseq_Sensor_Off_default();
			}  else
			{
				if (ifaceHWFault.latent_raised)
				{ 
					exseq_Sensor_Ok();
					enseq_Sensor_LatentFailure_default();
				}  else
				{
					did_transition = false;
				}
			}
		} 
	} 
	return did_transition;
}

sc_boolean Sensor::Sensor_Off_react(const sc_boolean try_transition) {
	/* The reactions of state Off. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			did_transition = false;
		} 
	} 
	return did_transition;
}

sc_boolean Sensor::Sensor_LatentFailure_react(const sc_boolean try_transition) {
	/* The reactions of state LatentFailure. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			did_transition = false;
		} 
	} 
	return did_transition;
}



