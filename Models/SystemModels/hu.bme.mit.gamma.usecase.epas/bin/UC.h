/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef UC_H_
#define UC_H_


#include "sc_types.h"
#include "StatemachineInterface.h"

/*! \file Header of the state machine 'UC'.
*/


/*! Define indices of states in the StateConfVector */
#define SCVI_UC_ON 0
#define SCVI_UC_OFF 0


class UC : public StatemachineInterface
{
	public:
		UC();
		
		virtual ~UC();
		
		/*! Enumeration of all states */ 
		typedef enum
		{
			UC_last_state,
			UC_On,
			UC_Off
		} UCStates;
					
		static const sc_integer numStates = 2;
		
		//! Inner class for HWFault interface scope.
		class SCI_HWFault
		{
			public:
				/*! Raises the in event 'shutdown' that is defined in the interface scope 'HWFault'. */
				void raise_shutdown();
				
				
				
			private:
				friend class UC;
				sc_boolean shutdown_raised;
				
				
		};
		
		/*! Returns an instance of the interface class 'SCI_HWFault'. */
		SCI_HWFault* getSCI_HWFault();
		
		//! Inner class for Fault interface scope.
		class SCI_Fault
		{
			public:
				/*! Checks if the out event 'shutdown' that is defined in the interface scope 'Fault' has been raised. */
				sc_boolean isRaised_shutdown() const;
				
				
				
			private:
				friend class UC;
				sc_boolean shutdown_raised;
				
				
		};
		
		/*! Returns an instance of the interface class 'SCI_Fault'. */
		SCI_Fault* getSCI_Fault();
		
		
		/*
		 * Functions inherited from StatemachineInterface
		 */
		virtual void init();
		
		virtual void enter();
		
		virtual void exit();
		
		virtual void runCycle();
		
		/*!
		* Checks if the state machine is active (until 2.4.1 this method was used for states).
		* A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		*/
		virtual sc_boolean isActive() const;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		virtual sc_boolean isFinal() const;
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		sc_boolean isStateActive(UCStates state) const;
		
		
		
	protected:
		
		
	private:
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc_ushort maxOrthogonalStates = 1;
		
		
		
		UCStates stateConfVector[maxOrthogonalStates];
		
		sc_ushort stateConfVectorPosition;
		
		SCI_HWFault ifaceHWFault;
		SCI_Fault ifaceFault;
		
		// prototypes of all internal functions
		
		void enact_UC_Off();
		void enseq_UC_On_default();
		void enseq_UC_Off_default();
		void enseq_UC_default();
		void exseq_UC_On();
		void exseq_UC_Off();
		void exseq_UC();
		void react_UC__entry_Default();
		sc_boolean react();
		sc_boolean UC_On_react(const sc_boolean try_transition);
		sc_boolean UC_Off_react(const sc_boolean try_transition);
		void clearInEvents();
		void clearOutEvents();
		
		
		
		
};




#endif /* UC_H_ */
