package mainctrl
import "/hu.bme.mit.gamma.usecase.epas/model/interfaces/Interfaces.gcd"
@TransitionPriority = order-based
statechart Mainctrl [
	port S3HW : requires SensorFault
	port S1HW : requires SensorFault
	port Monitor : provides Monitor
	port S2HW : requires SensorFault
	port UCHW : requires UCFault
] {
	var latentsensors : integer
	var onsensors : integer
	var oksensors : integer
	var offsensors : integer
	transition from Choice4 to SelfSteeringState [latentsensors >= oksensors] / raise
		Monitor.selfsteering;
	transition from Choice4 to working [else]
	transition from Choice5 to Off [0 = onsensors]
	transition from Choice5 to Warning [else]
	transition from Entry0 to On
	transition from Entry1 to working
	transition from Entry2 to main / onsensors := 3; oksensors := 3; offsensors := 0;
	transition from Entry3 to NormalOperation
	transition from NormalOperation to Warning when S1HW.det
	transition from NormalOperation to Warning when S2HW.det
	transition from NormalOperation to Warning when S3HW.det
	transition from On to Choice5 when (S3HW.det || S1HW.det) || S2HW.det / onsensors := onsensors -
		1; oksensors := oksensors - 1;
	transition from working to Choice4 when (S2HW.latent || S3HW.latent) || S1HW.latent /
		latentsensors := latentsensors + 1; oksensors := oksensors - 1;
	transition from working to ShutdownState when UCHW.shutdown
	region main_region {
		state main {
			region evaluation {
				initial Entry1
				state SelfSteeringState {
					entry / raise Monitor.selfsteering;
				}
				state working
				state ShutdownState {
					entry / raise Monitor.loa;
				}
				choice Choice4
			}
			region operation {
				state On {
					region r1 {
						initial Entry3
						state Warning {
							entry / raise Monitor.warning;
						}
						state NormalOperation
					}
				}
				initial Entry0
				state Off {
					entry / raise Monitor.loa;
				}
				choice Choice5
			}
		}
		initial Entry2
	}
}