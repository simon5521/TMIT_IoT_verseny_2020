/** Generated by YAKINDU Statechart Tools code generator. */
package hu.bme.mit.gamma.usecase.epas.evaluation;

import java.util.LinkedList;
import java.util.List;

public class EvaluationStatemachine implements IEvaluationStatemachine {
	protected class SCIAMonitorImpl implements SCIAMonitor {
	
		private boolean warning;
		
		
		public void raiseWarning() {
			warning = true;
		}
		
		private boolean selfsteering;
		
		
		public void raiseSelfsteering() {
			selfsteering = true;
		}
		
		private boolean loa;
		
		
		public void raiseLoa() {
			loa = true;
		}
		
		protected void clearEvents() {
			warning = false;
			selfsteering = false;
			loa = false;
		}
	}
	
	
	protected class SCIBMonitorImpl implements SCIBMonitor {
	
		private boolean warning;
		
		
		public void raiseWarning() {
			warning = true;
		}
		
		private boolean selfsteering;
		
		
		public void raiseSelfsteering() {
			selfsteering = true;
		}
		
		private boolean loa;
		
		
		public void raiseLoa() {
			loa = true;
		}
		
		protected void clearEvents() {
			warning = false;
			selfsteering = false;
			loa = false;
		}
	}
	
	
	protected class SCIEvalImpl implements SCIEval {
	
		private List<SCIEvalListener> listeners = new LinkedList<SCIEvalListener>();
		
		public List<SCIEvalListener> getListeners() {
			return listeners;
		}
		private boolean sS;
		
		
		public boolean isRaisedSS() {
			return sS;
		}
		
		protected void raiseSS() {
			sS = true;
			for (SCIEvalListener listener : listeners) {
				listener.onSSRaised();
			}
		}
		
		private boolean sLoA;
		
		
		public boolean isRaisedSLoA() {
			return sLoA;
		}
		
		protected void raiseSLoA() {
			sLoA = true;
			for (SCIEvalListener listener : listeners) {
				listener.onSLoARaised();
			}
		}
		
		protected void clearEvents() {
		}
		protected void clearOutEvents() {
		
		sS = false;
		sLoA = false;
		}
		
	}
	
	
	protected SCIAMonitorImpl sCIAMonitor;
	
	protected SCIBMonitorImpl sCIBMonitor;
	
	protected SCIEvalImpl sCIEval;
	
	private boolean initialized = false;
	
	public enum State {
		evaluation_Operation,
		evaluation_Operation_r1_Normal,
		evaluation_Operation_r1_Warning,
		evaluation_Selfsteering,
		evaluation_LoA,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private long sides;
	
	protected long getSides() {
		return sides;
	}
	
	protected void setSides(long value) {
		this.sides = value;
	}
	
	
	public EvaluationStatemachine() {
		sCIAMonitor = new SCIAMonitorImpl();
		sCIBMonitor = new SCIBMonitorImpl();
		sCIEval = new SCIEvalImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		setSides(0);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		enterSequence_evaluation_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case evaluation_Operation_r1_Normal:
				evaluation_Operation_r1_Normal_react(true);
				break;
			case evaluation_Operation_r1_Warning:
				evaluation_Operation_r1_Warning_react(true);
				break;
			case evaluation_Selfsteering:
				evaluation_Selfsteering_react(true);
				break;
			case evaluation_LoA:
				evaluation_LoA_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_evaluation();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCIAMonitor.clearEvents();
		sCIBMonitor.clearEvents();
		sCIEval.clearEvents();
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCIEval.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case evaluation_Operation:
			return stateVector[0].ordinal() >= State.
					evaluation_Operation.ordinal()&& stateVector[0].ordinal() <= State.evaluation_Operation_r1_Warning.ordinal();
		case evaluation_Operation_r1_Normal:
			return stateVector[0] == State.evaluation_Operation_r1_Normal;
		case evaluation_Operation_r1_Warning:
			return stateVector[0] == State.evaluation_Operation_r1_Warning;
		case evaluation_Selfsteering:
			return stateVector[0] == State.evaluation_Selfsteering;
		case evaluation_LoA:
			return stateVector[0] == State.evaluation_LoA;
		default:
			return false;
		}
	}
	
	public SCIAMonitor getSCIAMonitor() {
		return sCIAMonitor;
	}
	
	public SCIBMonitor getSCIBMonitor() {
		return sCIBMonitor;
	}
	
	public SCIEval getSCIEval() {
		return sCIEval;
	}
	
	private boolean check_evaluation__choice_0_tr0_tr0() {
		return getSides()==0;
	}
	
	private void effect_evaluation__choice_0_tr0() {
		enterSequence_evaluation_LoA_default();
	}
	
	private void effect_evaluation__choice_0_tr1() {
		enterSequence_evaluation_Operation_default();
	}
	
	/* Entry action for state 'Selfsteering'. */
	private void entryAction_evaluation_Selfsteering() {
		sCIEval.raiseSS();
	}
	
	/* Entry action for state 'LoA'. */
	private void entryAction_evaluation_LoA() {
		sCIEval.raiseSLoA();
	}
	
	/* 'default' enter sequence for state Operation */
	private void enterSequence_evaluation_Operation_default() {
		enterSequence_evaluation_Operation_r1_default();
	}
	
	/* 'default' enter sequence for state Normal */
	private void enterSequence_evaluation_Operation_r1_Normal_default() {
		nextStateIndex = 0;
		stateVector[0] = State.evaluation_Operation_r1_Normal;
	}
	
	/* 'default' enter sequence for state Warning */
	private void enterSequence_evaluation_Operation_r1_Warning_default() {
		nextStateIndex = 0;
		stateVector[0] = State.evaluation_Operation_r1_Warning;
	}
	
	/* 'default' enter sequence for state Selfsteering */
	private void enterSequence_evaluation_Selfsteering_default() {
		entryAction_evaluation_Selfsteering();
		nextStateIndex = 0;
		stateVector[0] = State.evaluation_Selfsteering;
	}
	
	/* 'default' enter sequence for state LoA */
	private void enterSequence_evaluation_LoA_default() {
		entryAction_evaluation_LoA();
		nextStateIndex = 0;
		stateVector[0] = State.evaluation_LoA;
	}
	
	/* 'default' enter sequence for region evaluation */
	private void enterSequence_evaluation_default() {
		react_evaluation__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_evaluation_Operation_r1_default() {
		react_evaluation_Operation_r1__entry_Default();
	}
	
	/* Default exit sequence for state Operation */
	private void exitSequence_evaluation_Operation() {
		exitSequence_evaluation_Operation_r1();
	}
	
	/* Default exit sequence for state Normal */
	private void exitSequence_evaluation_Operation_r1_Normal() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Warning */
	private void exitSequence_evaluation_Operation_r1_Warning() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Selfsteering */
	private void exitSequence_evaluation_Selfsteering() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state LoA */
	private void exitSequence_evaluation_LoA() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region evaluation */
	private void exitSequence_evaluation() {
		switch (stateVector[0]) {
		case evaluation_Operation_r1_Normal:
			exitSequence_evaluation_Operation_r1_Normal();
			break;
		case evaluation_Operation_r1_Warning:
			exitSequence_evaluation_Operation_r1_Warning();
			break;
		case evaluation_Selfsteering:
			exitSequence_evaluation_Selfsteering();
			break;
		case evaluation_LoA:
			exitSequence_evaluation_LoA();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_evaluation_Operation_r1() {
		switch (stateVector[0]) {
		case evaluation_Operation_r1_Normal:
			exitSequence_evaluation_Operation_r1_Normal();
			break;
		case evaluation_Operation_r1_Warning:
			exitSequence_evaluation_Operation_r1_Warning();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_evaluation__choice_0() {
		if (check_evaluation__choice_0_tr0_tr0()) {
			effect_evaluation__choice_0_tr0();
		} else {
			effect_evaluation__choice_0_tr1();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_evaluation__entry_Default() {
		setSides(2);
		
		enterSequence_evaluation_Operation_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_evaluation_Operation_r1__entry_Default() {
		enterSequence_evaluation_Operation_r1_Normal_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean evaluation_Operation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if ((sCIAMonitor.selfsteering || sCIBMonitor.selfsteering)) {
					exitSequence_evaluation_Operation();
					sCIEval.raiseSS();
					
					enterSequence_evaluation_Selfsteering_default();
				} else {
					if ((sCIAMonitor.loa || sCIBMonitor.loa)) {
						exitSequence_evaluation_Operation();
						setSides(getSides() - 1);
						
						react_evaluation__choice_0();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean evaluation_Operation_r1_Normal_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (evaluation_Operation_react(try_transition)==false) {
				if ((sCIAMonitor.warning || sCIBMonitor.warning)) {
					exitSequence_evaluation_Operation_r1_Normal();
					enterSequence_evaluation_Operation_r1_Warning_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean evaluation_Operation_r1_Warning_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (evaluation_Operation_react(try_transition)==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean evaluation_Selfsteering_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean evaluation_LoA_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
}
