/** Generated by YAKINDU Statechart Tools code generator. */
package hu.bme.mit.gamma.usecase.epas.uc;

import java.util.LinkedList;
import java.util.List;

public class UCStatemachine implements IUCStatemachine {
	protected class SCIHWFaultImpl implements SCIHWFault {
	
		private boolean shutdown;
		
		
		public void raiseShutdown() {
			shutdown = true;
		}
		
		protected void clearEvents() {
			shutdown = false;
		}
	}
	
	
	protected class SCIFaultImpl implements SCIFault {
	
		private List<SCIFaultListener> listeners = new LinkedList<SCIFaultListener>();
		
		public List<SCIFaultListener> getListeners() {
			return listeners;
		}
		private boolean shutdown;
		
		
		public boolean isRaisedShutdown() {
			return shutdown;
		}
		
		protected void raiseShutdown() {
			shutdown = true;
			for (SCIFaultListener listener : listeners) {
				listener.onShutdownRaised();
			}
		}
		
		protected void clearEvents() {
		}
		protected void clearOutEvents() {
		
		shutdown = false;
		}
		
	}
	
	
	protected SCIHWFaultImpl sCIHWFault;
	
	protected SCIFaultImpl sCIFault;
	
	private boolean initialized = false;
	
	public enum State {
		uC_On,
		uC_Off,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	public UCStatemachine() {
		sCIHWFault = new SCIHWFaultImpl();
		sCIFault = new SCIFaultImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		enterSequence_UC_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case uC_On:
				uC_On_react(true);
				break;
			case uC_Off:
				uC_Off_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_UC();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCIHWFault.clearEvents();
		sCIFault.clearEvents();
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCIFault.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case uC_On:
			return stateVector[0] == State.uC_On;
		case uC_Off:
			return stateVector[0] == State.uC_Off;
		default:
			return false;
		}
	}
	
	public SCIHWFault getSCIHWFault() {
		return sCIHWFault;
	}
	
	public SCIFault getSCIFault() {
		return sCIFault;
	}
	
	/* Entry action for state 'Off'. */
	private void entryAction_UC_Off() {
		sCIFault.raiseShutdown();
	}
	
	/* 'default' enter sequence for state On */
	private void enterSequence_UC_On_default() {
		nextStateIndex = 0;
		stateVector[0] = State.uC_On;
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_UC_Off_default() {
		entryAction_UC_Off();
		nextStateIndex = 0;
		stateVector[0] = State.uC_Off;
	}
	
	/* 'default' enter sequence for region UC */
	private void enterSequence_UC_default() {
		react_UC__entry_Default();
	}
	
	/* Default exit sequence for state On */
	private void exitSequence_UC_On() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_UC_Off() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region UC */
	private void exitSequence_UC() {
		switch (stateVector[0]) {
		case uC_On:
			exitSequence_UC_On();
			break;
		case uC_Off:
			exitSequence_UC_Off();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_UC__entry_Default() {
		enterSequence_UC_On_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean uC_On_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCIHWFault.shutdown) {
					exitSequence_UC_On();
					enterSequence_UC_Off_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean uC_Off_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
}
