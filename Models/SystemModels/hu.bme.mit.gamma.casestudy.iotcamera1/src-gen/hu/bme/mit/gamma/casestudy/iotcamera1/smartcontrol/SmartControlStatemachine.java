/** Generated by YAKINDU Statechart Tools code generator. */
package hu.bme.mit.gamma.casestudy.iotcamera1.smartcontrol;

import java.util.LinkedList;
import java.util.List;

public class SmartControlStatemachine implements ISmartControlStatemachine {
	protected class SCIStatusImpl implements SCIStatus {
	
		private boolean full;
		
		
		public void raiseFull() {
			full = true;
		}
		
		private boolean free;
		
		
		public void raiseFree() {
			free = true;
		}
		
		protected void clearEvents() {
			full = false;
			free = false;
		}
	}
	
	
	protected class SCIInPicStreamImpl implements SCIInPicStream {
	
		private boolean newData;
		
		
		public void raiseNewData() {
			newData = true;
		}
		
		protected void clearEvents() {
			newData = false;
		}
	}
	
	
	protected class SCINetworkStreamImpl implements SCINetworkStream {
	
		private List<SCINetworkStreamListener> listeners = new LinkedList<SCINetworkStreamListener>();
		
		public List<SCINetworkStreamListener> getListeners() {
			return listeners;
		}
		private boolean newData;
		
		
		public boolean isRaisedNewData() {
			return newData;
		}
		
		protected void raiseNewData() {
			newData = true;
			for (SCINetworkStreamListener listener : listeners) {
				listener.onNewDataRaised();
			}
		}
		
		protected void clearEvents() {
		}
		protected void clearOutEvents() {
		
		newData = false;
		}
		
	}
	
	
	protected class SCILocalStreamImpl implements SCILocalStream {
	
		private List<SCILocalStreamListener> listeners = new LinkedList<SCILocalStreamListener>();
		
		public List<SCILocalStreamListener> getListeners() {
			return listeners;
		}
		private boolean newData;
		
		
		public boolean isRaisedNewData() {
			return newData;
		}
		
		protected void raiseNewData() {
			newData = true;
			for (SCILocalStreamListener listener : listeners) {
				listener.onNewDataRaised();
			}
		}
		
		protected void clearEvents() {
		}
		protected void clearOutEvents() {
		
		newData = false;
		}
		
	}
	
	
	protected SCIStatusImpl sCIStatus;
	
	protected SCIInPicStreamImpl sCIInPicStream;
	
	protected SCINetworkStreamImpl sCINetworkStream;
	
	protected SCILocalStreamImpl sCILocalStream;
	
	private boolean initialized = false;
	
	public enum State {
		mainregion_SendToCloud,
		mainregion_SendToLocal,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	public SmartControlStatemachine() {
		sCIStatus = new SCIStatusImpl();
		sCIInPicStream = new SCIInPicStreamImpl();
		sCINetworkStream = new SCINetworkStreamImpl();
		sCILocalStream = new SCILocalStreamImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		enterSequence_mainregion_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case mainregion_SendToCloud:
				mainregion_SendToCloud_react(true);
				break;
			case mainregion_SendToLocal:
				mainregion_SendToLocal_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_mainregion();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCIStatus.clearEvents();
		sCIInPicStream.clearEvents();
		sCINetworkStream.clearEvents();
		sCILocalStream.clearEvents();
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCINetworkStream.clearOutEvents();
		sCILocalStream.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case mainregion_SendToCloud:
			return stateVector[0] == State.mainregion_SendToCloud;
		case mainregion_SendToLocal:
			return stateVector[0] == State.mainregion_SendToLocal;
		default:
			return false;
		}
	}
	
	public SCIStatus getSCIStatus() {
		return sCIStatus;
	}
	
	public SCIInPicStream getSCIInPicStream() {
		return sCIInPicStream;
	}
	
	public SCINetworkStream getSCINetworkStream() {
		return sCINetworkStream;
	}
	
	public SCILocalStream getSCILocalStream() {
		return sCILocalStream;
	}
	
	/* 'default' enter sequence for state SendToCloud */
	private void enterSequence_mainregion_SendToCloud_default() {
		nextStateIndex = 0;
		stateVector[0] = State.mainregion_SendToCloud;
	}
	
	/* 'default' enter sequence for state SendToLocal */
	private void enterSequence_mainregion_SendToLocal_default() {
		nextStateIndex = 0;
		stateVector[0] = State.mainregion_SendToLocal;
	}
	
	/* 'default' enter sequence for region mainregion */
	private void enterSequence_mainregion_default() {
		react_mainregion__entry_Default();
	}
	
	/* Default exit sequence for state SendToCloud */
	private void exitSequence_mainregion_SendToCloud() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state SendToLocal */
	private void exitSequence_mainregion_SendToLocal() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region mainregion */
	private void exitSequence_mainregion() {
		switch (stateVector[0]) {
		case mainregion_SendToCloud:
			exitSequence_mainregion_SendToCloud();
			break;
		case mainregion_SendToLocal:
			exitSequence_mainregion_SendToLocal();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_mainregion__entry_Default() {
		enterSequence_mainregion_SendToLocal_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean mainregion_SendToCloud_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCIStatus.free) {
					exitSequence_mainregion_SendToCloud();
					enterSequence_mainregion_SendToLocal_default();
				} else {
					if (sCIInPicStream.newData) {
						exitSequence_mainregion_SendToCloud();
						sCILocalStream.raiseNewData();
						
						enterSequence_mainregion_SendToCloud_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean mainregion_SendToLocal_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCIStatus.full) {
					exitSequence_mainregion_SendToLocal();
					enterSequence_mainregion_SendToCloud_default();
				} else {
					if (sCIInPicStream.newData) {
						exitSequence_mainregion_SendToLocal();
						sCILocalStream.raiseNewData();
						
						enterSequence_mainregion_SendToLocal_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
}
