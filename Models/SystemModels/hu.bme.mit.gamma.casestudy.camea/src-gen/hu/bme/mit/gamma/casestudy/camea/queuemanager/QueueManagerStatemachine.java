/** Generated by YAKINDU Statechart Tools code generator. */
package hu.bme.mit.gamma.casestudy.camea.queuemanager;


public class QueueManagerStatemachine implements IQueueManagerStatemachine {
	protected class SCIInStreamImpl implements SCIInStream {
	
		private boolean newData;
		
		
		public void raiseNewData() {
			newData = true;
		}
		
		protected void clearEvents() {
			newData = false;
		}
	}
	
	
	protected class SCIOutStreamImpl implements SCIOutStream {
	
		private boolean newData;
		
		
		public boolean isRaisedNewData() {
			return newData;
		}
		
		protected void raiseNewData() {
			newData = true;
		}
		
		protected void clearEvents() {
		}
		protected void clearOutEvents() {
		
		newData = false;
		}
		
	}
	
	
	protected class SCIDataLossImpl implements SCIDataLoss {
	
		private boolean newData;
		
		
		public boolean isRaisedNewData() {
			return newData;
		}
		
		protected void raiseNewData() {
			newData = true;
		}
		
		protected void clearEvents() {
		}
		protected void clearOutEvents() {
		
		newData = false;
		}
		
	}
	
	
	protected class SCIToHWImpl implements SCIToHW {
	
		private boolean newData;
		
		
		public boolean isRaisedNewData() {
			return newData;
		}
		
		protected void raiseNewData() {
			newData = true;
		}
		
		protected void clearEvents() {
		}
		protected void clearOutEvents() {
		
		newData = false;
		}
		
	}
	
	
	protected class SCIFromHWImpl implements SCIFromHW {
	
		private boolean newData;
		
		
		public void raiseNewData() {
			newData = true;
		}
		
		protected void clearEvents() {
			newData = false;
		}
	}
	
	
	protected SCIInStreamImpl sCIInStream;
	
	protected SCIOutStreamImpl sCIOutStream;
	
	protected SCIDataLossImpl sCIDataLoss;
	
	protected SCIToHWImpl sCIToHW;
	
	protected SCIFromHWImpl sCIFromHW;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Working,
		main_region_Full,
		main_region_NoData,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private long q_size;
	
	protected long getQ_size() {
		return q_size;
	}
	
	protected void setQ_size(long value) {
		this.q_size = value;
	}
	
	
	private long b_size;
	
	protected long getB_size() {
		return b_size;
	}
	
	protected void setB_size(long value) {
		this.b_size = value;
	}
	
	
	public QueueManagerStatemachine() {
		sCIInStream = new SCIInStreamImpl();
		sCIOutStream = new SCIOutStreamImpl();
		sCIDataLoss = new SCIDataLossImpl();
		sCIToHW = new SCIToHWImpl();
		sCIFromHW = new SCIFromHWImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		setQ_size(0);
		
		setB_size(20);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		enterSequence_main_region_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Working:
				main_region_Working_react(true);
				break;
			case main_region_Full:
				main_region_Full_react(true);
				break;
			case main_region_NoData:
				main_region_NoData_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCIInStream.clearEvents();
		sCIOutStream.clearEvents();
		sCIDataLoss.clearEvents();
		sCIToHW.clearEvents();
		sCIFromHW.clearEvents();
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCIOutStream.clearOutEvents();
		sCIDataLoss.clearOutEvents();
		sCIToHW.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Working:
			return stateVector[0] == State.main_region_Working;
		case main_region_Full:
			return stateVector[0] == State.main_region_Full;
		case main_region_NoData:
			return stateVector[0] == State.main_region_NoData;
		default:
			return false;
		}
	}
	
	public SCIInStream getSCIInStream() {
		return sCIInStream;
	}
	
	public SCIOutStream getSCIOutStream() {
		return sCIOutStream;
	}
	
	public SCIDataLoss getSCIDataLoss() {
		return sCIDataLoss;
	}
	
	public SCIToHW getSCIToHW() {
		return sCIToHW;
	}
	
	public SCIFromHW getSCIFromHW() {
		return sCIFromHW;
	}
	
	private boolean check_main_region__choice_0_tr0_tr0() {
		return (getB_size() - 1)==getQ_size();
	}
	
	private boolean check_main_region__choice_1_tr1_tr1() {
		return getQ_size()==0;
	}
	
	private void effect_main_region__choice_0_tr0() {
		enterSequence_main_region_Full_default();
	}
	
	private void effect_main_region__choice_0_tr1() {
		enterSequence_main_region_Working_default();
	}
	
	private void effect_main_region__choice_1_tr1() {
		enterSequence_main_region_NoData_default();
	}
	
	private void effect_main_region__choice_1_tr0() {
		setQ_size(getQ_size() - 1);
		
		sCIToHW.raiseNewData();
		
		enterSequence_main_region_Working_default();
	}
	
	/* 'default' enter sequence for state Working */
	private void enterSequence_main_region_Working_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Working;
	}
	
	/* 'default' enter sequence for state Full */
	private void enterSequence_main_region_Full_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Full;
	}
	
	/* 'default' enter sequence for state NoData */
	private void enterSequence_main_region_NoData_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_NoData;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Working */
	private void exitSequence_main_region_Working() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Full */
	private void exitSequence_main_region_Full() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state NoData */
	private void exitSequence_main_region_NoData() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Working:
			exitSequence_main_region_Working();
			break;
		case main_region_Full:
			exitSequence_main_region_Full();
			break;
		case main_region_NoData:
			exitSequence_main_region_NoData();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_0() {
		if (check_main_region__choice_0_tr0_tr0()) {
			effect_main_region__choice_0_tr0();
		} else {
			effect_main_region__choice_0_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_1() {
		if (check_main_region__choice_1_tr1_tr1()) {
			effect_main_region__choice_1_tr1();
		} else {
			effect_main_region__choice_1_tr0();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_NoData_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Working_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCIInStream.newData) {
					exitSequence_main_region_Working();
					setQ_size(getQ_size() + 1);
					
					react_main_region__choice_0();
				} else {
					if (sCIFromHW.newData) {
						exitSequence_main_region_Working();
						sCIOutStream.raiseNewData();
						
						react_main_region__choice_1();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Full_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCIInStream.newData) {
					exitSequence_main_region_Full();
					sCIDataLoss.raiseNewData();
					
					enterSequence_main_region_Full_default();
				} else {
					if (sCIFromHW.newData) {
						exitSequence_main_region_Full();
						setQ_size(getQ_size() - 1);
						
						sCIToHW.raiseNewData();
						
						sCIOutStream.raiseNewData();
						
						enterSequence_main_region_Working_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_NoData_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCIInStream.newData) {
					exitSequence_main_region_NoData();
					sCIToHW.raiseNewData();
					
					enterSequence_main_region_Working_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
}
